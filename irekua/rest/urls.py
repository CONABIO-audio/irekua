from django.conf.urls import url, include
from rest_framework import routers
from rest import views


router = routers.DefaultRouter()
router.register(
    r'annotations',
    views.AnnotationViewSet)
router.register(
    r'annotation_votes',
    views.AnnotationVoteViewSet)
router.register(
    r'secondary_items',
    views.SecondaryItemViewSet)
router.register(
    r'annotation_tools',
    views.AnnotationToolViewSet)
router.register(
    r'collection_devices',
    views.CollectionDeviceViewSet)
router.register(
    r'collection_sites',
    views.CollectionSiteViewSet)
router.register(
    r'collection_users',
    views.CollectionUserViewSet)
router.register(
    r'collections',
    views.CollectionViewSet)
router.register(
    r'device_brands',
    views.DeviceBrandViewSet)
router.register(
    r'devices',
    views.DeviceViewSet)
router.register(
    r'entailments',
    views.EntailmentViewSet)
router.register(
    r'institutions',
    views.InstitutionViewSet)
router.register(
    r'items',
    views.ItemViewSet)
router.register(
    r'licences',
    views.LicenceViewSet)
router.register(
    r'metacollections',
    views.MetaCollectionViewSet)
router.register(
    r'physical_devices',
    views.PhysicalDeviceViewSet)
router.register(
    r'roles',
    views.RoleViewSet)
router.register(
    r'sampling_events',
    views.SamplingEventViewSet)
router.register(
    r'sites',
    views.SiteViewSet)
router.register(
    r'synonym_suggestions',
    views.SynonymSuggestionViewSet)
router.register(
    r'synonyms',
    views.SynonymViewSet)
router.register(
    r'tags',
    views.TagViewSet)
router.register(
    r'term_suggestions',
    views.TermSuggestionViewSet)
router.register(
    r'terms',
    views.TermTypeViewSet)
router.register(
    r'term_instances',
    views.TermViewSet)
router.register(
    r'users',
    views.UserViewSet)
router.register(
    r'sampling_event_devices',
    views.SamplingEventDeviceViewSet)

# router = routers.DefaultRouter()
router.register(
    r'annotation_types',
    views.AnnotationTypeViewSet)
router.register(
    r'collection_types',
    views.CollectionTypeViewSet)
router.register(
    r'device_types',
    views.DeviceTypeViewSet)
router.register(
    r'entailment_types',
    views.EntailmentTypeViewSet)
router.register(
    r'event_types',
    views.EventTypeViewSet)
router.register(
    r'item_types',
    views.ItemTypeViewSet)
router.register(
    r'licence_types',
    views.LicenceTypeViewSet)
router.register(
    r'sampling_event_type_device_types',
    views.SamplingEventTypeDeviceTypeViewSet)
router.register(
    r'sampling_event_type_site_types',
    views.SamplingEventTypeSiteTypeViewSet)
router.register(
    r'sampling_event_types',
    views.SamplingEventTypeViewSet)
router.register(
    r'site_types',
    views.SiteTypeViewSet)
router.register(
    r'collection_type_site_types',
    views.CollectionTypeSiteTypeViewSet)
router.register(
    r'collection_type_administrators',
    views.CollectionTypeAdministratorViewSet)
router.register(
    r'collection_type_annotation_types',
    views.CollectionTypeAnnotationTypeViewSet)
router.register(
    r'collection_type_licence_types',
    views.CollectionTypeLicenceTypeViewSet)
router.register(
    r'collection_type_sampling_event_types',
    views.CollectionTypeSamplingEventTypeViewSet)
router.register(
    r'collection_type_item_types',
    views.CollectionTypeItemTypeViewSet)
router.register(
    r'collection_type_event_types',
    views.CollectionTypeEventTypeViewSet)
router.register(
    r'collection_type_device_types',
    views.CollectionTypeDeviceTypeViewSet)
router.register(
    r'collection_type_roles',
    views.CollectionTypeRoleViewSet)


urlpatterns = [
    url(r'^', include(router.urls)),
    # url(r'^types/', include(router.urls)),
]

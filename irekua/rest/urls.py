from django.conf.urls import url, include
from rest_framework import routers
from rest import views


router = routers.DefaultRouter()
router.register(
    r'annotations',
    views.AnnotationViewSet,
    basename='annotation')
router.register(
    r'annotation_votes',
    views.AnnotationVoteViewSet,
    basename='annotationvote')
router.register(
    r'secondary_items',
    views.SecondaryItemViewSet,
    basename='secondaryitem')
router.register(
    r'annotation_tools',
    views.AnnotationToolViewSet,
    basename='annotationtool')
router.register(
    r'collection_devices',
    views.CollectionDeviceViewSet,
    basename='collectiondevice')
router.register(
    r'collection_sites',
    views.CollectionSiteViewSet,
    basename='collectionsite')
router.register(
    r'collection_users',
    views.CollectionUserViewSet,
    basename='collectionuser')
router.register(
    r'collections',
    views.CollectionViewSet,
    basename='collection')
router.register(
    r'device_brands',
    views.DeviceBrandViewSet,
    basename='devicebrand')
router.register(
    r'devices',
    views.DeviceViewSet,
    basename='device')
router.register(
    r'entailments',
    views.EntailmentViewSet,
    basename='entailment')
router.register(
    r'institutions',
    views.InstitutionViewSet,
    basename='institution')
router.register(
    r'items',
    views.ItemViewSet,
    basename='item')
router.register(
    r'licences',
    views.LicenceViewSet,
    basename='licence')
router.register(
    r'metacollections',
    views.MetaCollectionViewSet,
    basename='metacollection')
router.register(
    r'physical_devices',
    views.PhysicalDeviceViewSet,
    basename='physicaldevice')
router.register(
    r'roles',
    views.RoleViewSet,
    basename='role')
router.register(
    r'sampling_events',
    views.SamplingEventViewSet,
    basename='samplingevent')
router.register(
    r'sites',
    views.SiteViewSet,
    basename='site')
router.register(
    r'synonym_suggestions',
    views.SynonymSuggestionViewSet,
    basename='synonymsuggestion')
router.register(
    r'synonyms',
    views.SynonymViewSet,
    basename='synonym')
router.register(
    r'tags',
    views.TagViewSet,
    basename='tag')
router.register(
    r'term_suggestions',
    views.TermSuggestionViewSet,
    basename='termsuggestion')
router.register(
    r'terms',
    views.TermViewSet,
    basename='term')
router.register(
    r'users',
    views.UserViewSet,
    basename='user')
router.register(
    r'sampling_event_devices',
    views.SamplingEventDeviceViewSet)

types_router = routers.DefaultRouter()
types_router.register(
    r'annotation_types',
    views.AnnotationTypeViewSet,
    basename='annotationtype')
types_router.register(
    r'collection_types',
    views.CollectionTypeViewSet,
    basename='collectiontype')
types_router.register(
    r'device_types',
    views.DeviceTypeViewSet,
    basename='devicetype')
types_router.register(
    r'entailment_types',
    views.EntailmentTypeViewSet,
    basename='entailmenttype')
types_router.register(
    r'event_types',
    views.EventTypeViewSet,
    basename='eventtype')
types_router.register(
    r'item_types',
    views.ItemTypeViewSet,
    basename='itemtype')
types_router.register(
    r'licence_types',
    views.LicenceTypeViewSet,
    basename='licencetype')
types_router.register(
    r'sampling_event_type_device_types',
    views.SamplingEventTypeDeviceTypeViewSet)
types_router.register(
    r'sampling_event_type_site_types',
    views.SamplingEventTypeSiteTypeViewSet)
types_router.register(
    r'sampling_event_types',
    views.SamplingEventTypeViewSet,
    basename='samplingeventtype')
types_router.register(
    r'site_types',
    views.SiteTypeViewSet,
    basename='sitetype')
types_router.register(
    r'term_types',
    views.TermTypeViewSet,
    basename='termtype')
types_router.register(
    r'collection_type_site_types',
    views.CollectionTypeSiteTypeViewSet)
types_router.register(
    r'collection_type_administrators',
    views.CollectionTypeAdministratorViewSet)
types_router.register(
    r'collection_type_annotation_types',
    views.CollectionTypeAnnotationTypeViewSet)
types_router.register(
    r'collection_type_licence_types',
    views.CollectionTypeLicenceTypeViewSet)
types_router.register(
    r'collection_type_sampling_event_types',
    views.CollectionTypeSamplingEventTypeViewSet)
types_router.register(
    r'collection_type_item_types',
    views.CollectionTypeItemTypeViewSet)
types_router.register(
    r'collection_type_event_types',
    views.CollectionTypeEventTypeViewSet)
types_router.register(
    r'collection_type_device_types',
    views.CollectionTypeDeviceTypeViewSet)
types_router.register(
    r'collection_type_roles',
    views.CollectionTypeRoleViewSet)


urlpatterns = [
    url(r'^', include(router.urls)),
    url(r'^types/', include(types_router.urls)),
]

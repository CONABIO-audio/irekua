# Generated by Django 2.1.7 on 2019-03-03 19:49

import database.models.schemas
import database.utils
from django.conf import settings
import django.contrib.auth.models
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields.hstore
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', django.contrib.postgres.fields.hstore.HStoreField(db_column='label', default=database.utils.empty_json, help_text='Labels associated to annotation', verbose_name='label')),
                ('annotation', django.contrib.postgres.fields.jsonb.JSONField(db_column='annotation', default=database.utils.empty_json, help_text='Information of annotation location within item', verbose_name='annotation')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(db_column='metadata', default=database.utils.empty_json, help_text='Metadata associated to annotation', verbose_name='metadata')),
                ('certainty', models.FloatField(blank=True, db_column='certainty', help_text='Level of certainty of location or labelling of annotation', null=True, verbose_name='certainty')),
                ('quality', models.CharField(blank=True, choices=[('L', 'low'), ('M', 'medium'), ('H', 'high')], db_column='quality', help_text='Quality of item content inside annotation', max_length=10, verbose_name='quality')),
                ('commentaries', models.TextField(blank=True, db_column='commentaries', help_text='Commentaries of annotator', verbose_name='commentaries')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='Date of creation of annotation', verbose_name='created on')),
                ('modified_on', models.DateTimeField(auto_now=True, db_column='modified_on', help_text='Date of last modification', verbose_name='modified on')),
            ],
            options={
                'verbose_name': 'Annotation',
                'verbose_name_plural': 'Annotations',
            },
        ),
        migrations.CreateModel(
            name='AnnotationTool',
            fields=[
                ('name', models.CharField(db_column='name', help_text='Name of annotation tool', max_length=64, primary_key=True, serialize=False, verbose_name='name')),
                ('version', models.CharField(blank=True, db_column='version', help_text='Version of annotation tool', max_length=16, verbose_name='version')),
                ('description', models.TextField(db_column='description', help_text='Description of annotation tool', verbose_name='description')),
                ('url', models.URLField(blank=True, db_column='url', help_text='Resource location', null=True, verbose_name='url')),
            ],
        ),
        migrations.CreateModel(
            name='AnnotationType',
            fields=[
                ('name', models.CharField(db_column='name', help_text='Name for type of annotation', max_length=32, primary_key=True, serialize=False, verbose_name='name')),
                ('description', models.TextField(db_column='description', help_text='Description of annotation type', verbose_name='description')),
                ('icon', models.ImageField(blank=True, db_column='icon', help_text='Annotation type icon', null=True, upload_to='images/annotation_types/', verbose_name='icon')),
            ],
            options={
                'verbose_name': 'Annotation Type',
                'verbose_name_plural': 'Annotation Types',
            },
        ),
        migrations.CreateModel(
            name='AnnotationVote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', django.contrib.postgres.fields.hstore.HStoreField(db_column='label', default=database.utils.empty_json, help_text='Labels associated to annotation vote', verbose_name='label')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='Date of creation of annotation', verbose_name='created on')),
                ('modified_on', models.DateTimeField(auto_now=True, db_column='modified_on', help_text='Date of last modification', verbose_name='modified on')),
                ('annotation', models.ForeignKey(db_column='annotation_id', help_text='Reference to annotation being voted', on_delete=django.db.models.deletion.CASCADE, to='database.Annotation', verbose_name='annotation id')),
                ('created_by', models.ForeignKey(blank=True, db_column='created_by', help_text='Creator of annotation vote', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='created by')),
            ],
            options={
                'verbose_name': 'Annotation Vote',
                'verbose_name_plural': 'Annotation Votes',
                'ordering': ['-modified_on'],
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('name', models.CharField(db_column='name', help_text='Name of collection', max_length=70, primary_key=True, serialize=False, verbose_name='name')),
                ('description', models.TextField(db_column='description', help_text='Description of collection', verbose_name='description')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(db_column='metadata', default=database.utils.empty_json, help_text='Metadata associated to collection', verbose_name='metadata')),
                ('is_open', models.BooleanField(db_column='is_open', help_text='Any user can enter this collection', verbose_name='is open')),
                ('logo', models.ImageField(blank=True, db_column='logo', help_text='Logo of data collection', null=True, upload_to='images/collections/', verbose_name='logo')),
                ('restrict_site_types', models.BooleanField(db_column='restrict_site_types', help_text='Flag indicating whether types of sites are restricted to registered ones', verbose_name='restrict site types')),
                ('restrict_annotation_types', models.BooleanField(db_column='restrict_annotation_types', help_text='Flag indicating whether types of annotations are restricted to registered ones', verbose_name='restrict annotation types')),
                ('restrict_item_types', models.BooleanField(db_column='restrict_item_types', help_text='Flag indicating whether types of items are restricted to registered ones', verbose_name='restrict item types')),
                ('restrict_licence_types', models.BooleanField(db_column='restrict_licence_types', help_text='Flag indicating whether types of licences are restricted to registered ones', verbose_name='restrict licence types')),
                ('restrict_device_types', models.BooleanField(db_column='restrict_device_types', help_text='Flag indicating whether types of devices are restricted to registered ones', verbose_name='restrict device types')),
                ('annotation_types', models.ManyToManyField(to='database.AnnotationType')),
            ],
            options={
                'verbose_name': 'Collection',
                'verbose_name_plural': 'Collections',
            },
        ),
        migrations.CreateModel(
            name='CollectionDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('internal_id', models.CharField(blank=True, db_column='internal_id', help_text='ID of device within the collection', max_length=64, verbose_name='internal id')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='metadata', default=database.utils.empty_json, help_text='Metadata associated with device within collection', null=True, verbose_name='metadata')),
                ('collection', models.ForeignKey(db_column='collection_id', help_text='Collection to which the device belongs', on_delete=django.db.models.deletion.CASCADE, to='database.Collection', verbose_name='collection id')),
            ],
            options={
                'verbose_name': 'Collection Device',
                'verbose_name_plural': 'Collection Devices',
            },
        ),
        migrations.CreateModel(
            name='CollectionDeviceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Collection Device Type',
                'verbose_name_plural': 'Collection Device Types',
            },
        ),
        migrations.CreateModel(
            name='CollectionItemType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Collection Item Type',
                'verbose_name_plural': 'Collection Item Types',
            },
        ),
        migrations.CreateModel(
            name='CollectionRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection', models.ForeignKey(db_column='collection_id', help_text='Collection in which role applies', on_delete=django.db.models.deletion.CASCADE, to='database.Collection', verbose_name='collection id')),
            ],
            options={
                'verbose_name': 'Collection Role',
                'verbose_name_plural': 'Collection Roles',
            },
        ),
        migrations.CreateModel(
            name='CollectionSite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('internal_id', models.CharField(blank=True, db_column='internal_id', help_text='ID of site within the collection', max_length=64, verbose_name='internal id')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='metadata', default=database.utils.empty_json, help_text='Metadata associated with site within collection', null=True, verbose_name='metadata')),
                ('collection', models.ForeignKey(db_column='collection_id', help_text='Collection to which the site belongs', on_delete=django.db.models.deletion.CASCADE, to='database.Collection', verbose_name='collection id')),
            ],
            options={
                'verbose_name': 'Collection Site',
                'verbose_name_plural': 'Collection Sites',
            },
        ),
        migrations.CreateModel(
            name='CollectionType',
            fields=[
                ('name', models.CharField(db_column='name', help_text='Name of collection type', max_length=128, primary_key=True, serialize=False, verbose_name='name')),
                ('description', models.TextField(db_column='description', help_text='Description of collection type', verbose_name='description')),
                ('restrict_site_types', models.BooleanField(db_column='restrict_site_types', help_text='Flag indicating whether types of sites are restricted to registered ones', verbose_name='restrict site types')),
                ('restrict_annotation_types', models.BooleanField(db_column='restrict_annotation_types', help_text='Flag indicating whether types of annotations are restricted to registered ones', verbose_name='restrict annotation types')),
                ('restrict_item_types', models.BooleanField(db_column='restrict_item_types', help_text='Flag indicating whether types of items are restricted to registered ones', verbose_name='restrict item types')),
                ('restrict_licence_types', models.BooleanField(db_column='restrict_licence_types', help_text='Flag indicating whether types of licences are restricted to registered ones', verbose_name='restrict licence types')),
                ('restrict_device_types', models.BooleanField(db_column='restrict_device_types', help_text='Flag indicating whether types of devices are restricted to registered ones', verbose_name='restrict device types')),
                ('annotation_types', models.ManyToManyField(to='database.AnnotationType')),
            ],
            options={
                'verbose_name': 'Collection Type',
                'verbose_name_plural': 'Collection Types',
            },
        ),
        migrations.CreateModel(
            name='CollectionUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='metadata', default=database.utils.empty_json, help_text='Metadata associated to user in collection', null=True, verbose_name='metadata')),
                ('is_admin', models.BooleanField(db_column='is_admin', default=False, help_text='Flag that indicates if user is administrator of the collection', verbose_name='is admin')),
                ('collection', models.ForeignKey(db_column='collection_id', help_text='Collection to which user belongs', on_delete=django.db.models.deletion.CASCADE, to='database.Collection', verbose_name='collection id')),
            ],
            options={
                'verbose_name': 'Collection User',
                'verbose_name_plural': 'Collection Users',
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.CharField(db_column='model', help_text='Model of device', max_length=64, verbose_name='model')),
            ],
            options={
                'verbose_name': 'Device',
                'verbose_name_plural': 'Devices',
            },
        ),
        migrations.CreateModel(
            name='DeviceBrand',
            fields=[
                ('name', models.CharField(db_column='name', help_text='Name of device brand', max_length=128, primary_key=True, serialize=False, verbose_name='name')),
                ('website', models.URLField(blank=True, db_column='website', help_text="Brand's website", null=True, verbose_name='website')),
                ('logo', models.ImageField(blank=True, db_column='logo', help_text='Logo of device brand', null=True, upload_to='images/device_brands/', verbose_name='logo')),
            ],
            options={
                'verbose_name': 'Device Brand',
                'verbose_name_plural': 'Device Brands',
            },
        ),
        migrations.CreateModel(
            name='DeviceType',
            fields=[
                ('name', models.CharField(db_column='name', help_text='Name for device type', max_length=64, primary_key=True, serialize=False, verbose_name='name')),
                ('description', models.TextField(db_column='description', help_text='Description of device type', verbose_name='description')),
                ('icon', models.ImageField(blank=True, db_column='icon', help_text='Icon for device type', null=True, upload_to='images/device_types/', verbose_name='icon')),
            ],
            options={
                'verbose_name': 'Device Type',
                'verbose_name_plural': 'Device Types',
            },
        ),
        migrations.CreateModel(
            name='Entailment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='metadata', help_text='Metadata associated to entailment', null=True, verbose_name='metadata')),
            ],
            options={
                'verbose_name': 'Entailment',
                'verbose_name_plural': 'Entailments',
            },
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('name', models.CharField(db_column='name', help_text='Name of event type', max_length=64, primary_key=True, serialize=False, verbose_name='name')),
                ('description', models.TextField(db_column='description', help_text='Description of event type', verbose_name='description')),
                ('icon', models.ImageField(blank=True, db_column='icon', help_text='Event type icon', null=True, upload_to='images/event_types/', verbose_name='icon')),
            ],
            options={
                'verbose_name': 'Event Type',
                'verbose_name_plural': 'Event Types',
            },
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institution_name', models.CharField(db_column='institution_name', help_text='Name of institution', max_length=256, verbose_name='institution name')),
                ('institution_code', models.CharField(blank=True, db_column='institution_code', help_text='Code of institution', max_length=64, verbose_name='institution code')),
                ('institution_id', models.CharField(blank=True, db_column='institution_id', help_text='ID of institution', max_length=64, verbose_name='institution id')),
                ('subdependency', models.CharField(blank=True, db_column='subdependency', help_text='Subdependency at institution', max_length=256, verbose_name='subdependency')),
                ('country', django_countries.fields.CountryField(blank=True, db_column='country', help_text='Country home of institution', max_length=2, verbose_name='country')),
                ('postal_code', models.CharField(db_column='postal_code', help_text='Postal code', max_length=8, verbose_name='postal code')),
                ('address', models.TextField(blank=True, db_column='address', help_text='Address of institution', verbose_name='address')),
                ('website', models.URLField(blank=True, db_column='website', help_text='Website of institution', verbose_name='website')),
                ('logo', models.ImageField(blank=True, db_column='logo', help_text='Institution logo', null=True, upload_to='images/institutions/', verbose_name='logo')),
            ],
            options={
                'verbose_name': 'Institution',
                'verbose_name_plural': 'Institutions',
                'ordering': ['institution_name'],
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(db_column='path', help_text='Path to resource', max_length=70, unique=True, verbose_name='path')),
                ('filesize', models.IntegerField(db_column='filesize', help_text='Size of resouce in Bytes', verbose_name='file size')),
                ('hash', models.CharField(db_column='hash', help_text='Hash of resource file', max_length=64, unique=True, verbose_name='hash')),
                ('hash_function', models.CharField(choices=[('md5', 'md5'), ('sha244', 'sha244'), ('sha256', 'sha256'), ('sha384', 'sha384'), ('sha512', 'sha512')], db_column='hash_function', help_text='Function used to create hash of file', max_length=10, verbose_name='hash function')),
                ('source_foreign_key', models.CharField(blank=True, db_column='source_foreign_key', help_text='Foreign key of file in source database', max_length=50, verbose_name='source foreign key')),
                ('media_info', django.contrib.postgres.fields.jsonb.JSONField(db_column='media_info', default=database.utils.empty_json, help_text='Information of resource file', verbose_name='media info')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='metadata', default=database.utils.empty_json, help_text='Metadata associated to item', null=True, verbose_name='metadata')),
                ('captured_on', models.DateTimeField(db_column='captured_on', help_text='Date on which item was produced', verbose_name='captured on')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='Date on which item was uploaded to database', verbose_name='created on')),
                ('is_uploaded', models.BooleanField(db_column='is_uploaded', help_text='Is the item file on the server?', verbose_name='is uploaded')),
                ('collection', models.ForeignKey(blank=True, db_column='collection_id', help_text='Collection to which item belongs', null=True, on_delete=django.db.models.deletion.PROTECT, to='database.Collection', verbose_name='collection id')),
            ],
            options={
                'verbose_name': 'Item',
                'verbose_name_plural': 'Items',
                'permissions': (('download_item', 'Can download item'),),
            },
        ),
        migrations.CreateModel(
            name='ItemType',
            fields=[
                ('name', models.CharField(db_column='name', help_text='Name of item type', max_length=64, primary_key=True, serialize=False, verbose_name='name')),
                ('description', models.TextField(db_column='description', help_text='Description of item type', verbose_name='description')),
                ('icon', models.ImageField(blank=True, db_column='icon', help_text='Item type icon', null=True, upload_to='images/item_types/', verbose_name='icon')),
                ('event_types', models.ManyToManyField(db_column='event_types', help_text='Types of event for this item type', to='database.EventType', verbose_name='event types')),
            ],
            options={
                'verbose_name': 'Item Type',
                'verbose_name_plural': 'Item Types',
            },
        ),
        migrations.CreateModel(
            name='Licence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document', models.CharField(blank=True, db_column='document', help_text='Legal document of licence agreement', max_length=70, verbose_name='document')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='Date of licence creation', verbose_name='created on')),
                ('valid_until', models.DateTimeField(blank=True, db_column='valid_until', help_text='Date at which the licence expires', null=True, verbose_name='valid until')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='metadata', default=database.utils.empty_json, help_text='Metadata associated with licence', null=True, verbose_name='metadata')),
            ],
            options={
                'verbose_name': 'Licence',
                'verbose_name_plural': 'Licences',
            },
        ),
        migrations.CreateModel(
            name='LicenceType',
            fields=[
                ('name', models.CharField(db_column='name', help_text='Licence type name', max_length=128, primary_key=True, serialize=False, verbose_name='name')),
                ('description', models.TextField(db_column='description', help_text='Description of licence', verbose_name='description')),
                ('document_template', models.CharField(blank=True, db_column='document_template', help_text='Template for licence document', max_length=128, unique=True, verbose_name='document template')),
                ('icon', models.ImageField(blank=True, db_column='icon', help_text='Licence type icon', null=True, upload_to='images/licence_types/', verbose_name='icon')),
                ('can_view', models.BooleanField(db_column='can_view', help_text='Any user can view item info', verbose_name='can view')),
                ('can_download', models.BooleanField(db_column='can_download', help_text='Any user can download item', verbose_name='can download')),
                ('can_view_annotations', models.BooleanField(db_column='can_view_annotations', help_text='Any user can view item annotations', verbose_name='can view annotations')),
                ('can_annotate', models.BooleanField(db_column='can_annotate', help_text='Any user can annotate item', verbose_name='can annotate')),
                ('can_vote_annotations', models.BooleanField(db_column='can_vote_annotations', help_text='Any user can vote on item annotations', verbose_name='can vote annotations')),
            ],
            options={
                'verbose_name': 'Licence Type',
                'verbose_name_plural': 'Licence Types',
            },
        ),
        migrations.CreateModel(
            name='MetaCollection',
            fields=[
                ('name', models.CharField(db_column='name', help_text='Name of meta collection', max_length=50, primary_key=True, serialize=False, verbose_name='name')),
                ('description', models.TextField(db_column='description', help_text='Description of metacollection', verbose_name='description')),
                ('creator', models.ForeignKey(blank=True, db_column='creator_id', help_text='Reference to creator of metacollection', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='creator id')),
                ('items', models.ManyToManyField(to='database.Item')),
            ],
            options={
                'verbose_name': 'Metacollection',
                'verbose_name_plural': 'Metacollections',
            },
        ),
        migrations.CreateModel(
            name='PhysicalDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(blank=True, db_column='serial_number', help_text='Serial number of device', max_length=100, null=True, unique=True, verbose_name='serial number')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='metadata', default=database.utils.empty_json, help_text='Metadata associated to device', null=True, verbose_name='metadata')),
                ('bundle', models.BooleanField(db_column='bundle', help_text='Does this device possibly represents many physical devices?', verbose_name='bundle')),
                ('device', models.ForeignKey(db_column='device_id', help_text='Reference to type of device', on_delete=django.db.models.deletion.PROTECT, to='database.Device', verbose_name='device id')),
                ('owner', models.ForeignKey(blank=True, db_column='owner_id', help_text='Owner of device', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='owner')),
            ],
            options={
                'verbose_name': 'Physical Device',
                'verbose_name_plural': 'Physical Devices',
            },
        ),
        migrations.CreateModel(
            name='RoleType',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.Group')),
                ('description', models.TextField(blank=True, db_column='description', help_text='Description of role', verbose_name='description')),
                ('icon', models.ImageField(blank=True, db_column='icon', help_text='Role type icon', null=True, upload_to='images/role_types/', verbose_name='icon')),
            ],
            options={
                'verbose_name': 'Role Type',
                'verbose_name_plural': 'Role Types',
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='SamplingEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('configuration', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='configuration', default=database.utils.empty_json, help_text='Configuration on device through the sampling event', null=True, verbose_name='configuration')),
                ('commentaries', models.TextField(blank=True, db_column='commentaries', help_text='Sampling event commentaries', verbose_name='commentaries')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='metadata', default=database.utils.empty_json, help_text='Metadata associated to sampling event', null=True, verbose_name='metadata')),
                ('started_on', models.DateTimeField(blank=True, db_column='started_on', help_text='Date at which sampling begun', null=True, verbose_name='started on')),
                ('ended_on', models.DateTimeField(blank=True, db_column='ended_on', help_text='Date at which sampling stoped', null=True, verbose_name='ended on')),
                ('device', models.ForeignKey(db_column='device_id', help_text='Reference to device used on sampling event', on_delete=django.db.models.deletion.PROTECT, to='database.PhysicalDevice', verbose_name='device id')),
            ],
            options={
                'verbose_name': 'Sampling Event',
                'verbose_name_plural': 'Sampling Events',
            },
        ),
        migrations.CreateModel(
            name='SamplingEventType',
            fields=[
                ('name', models.CharField(db_column='name', help_text='Name fo sampling event type', max_length=128, primary_key=True, serialize=False, verbose_name='name')),
                ('description', models.TextField(blank=True, db_column='description', help_text='Description of sampling event type', verbose_name='description')),
                ('icon', models.ImageField(blank=True, db_column='icon', help_text='Icon for sampling event type', null=True, upload_to='images/sampling_event_types/', verbose_name='icon')),
                ('restrict_device_types', models.BooleanField(db_column='restrict_device_types', default=False, help_text='Flag indicating whether to restrict device types associated with this sampling event type', verbose_name='restrict device types')),
                ('restrict_site_types', models.BooleanField(db_column='restrict_site_types', default=False, help_text='Flag indicating whether to restrict site types associated with this sampling event type', verbose_name='restrict site types')),
                ('device_types', models.ManyToManyField(db_column='device_types', help_text='Valid device types for this sampling event type', to='database.DeviceType', verbose_name='device types')),
            ],
            options={
                'verbose_name': 'Sampling Event Type',
                'verbose_name_plural': 'Sampling Event Types',
            },
        ),
        migrations.CreateModel(
            name='Schema',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.CharField(choices=[('annotation', 'annotation'), ('annotation_configuration', 'annotation configuration'), ('annotation_metadata', 'annotation metadata'), ('collection_metadata', 'collection metadata'), ('collection_device_metadata', 'collection device metadata'), ('collection_site_metadata', 'collection site metadata'), ('collection_user_metadata', 'collection user metadata'), ('device_metadata', 'device metadata'), ('device_configuration', 'device configuration'), ('entailment_metadata', 'entailment metadata'), ('item_media_info', 'item media info'), ('item_metadata', 'item metadata'), ('licence_metadata', 'licence metadata'), ('sampling_event_metadata', 'sampling event metadata'), ('secondary_item_media_info', 'secondary item media info'), ('site_metadata', 'site metadata'), ('synonym_metadata', 'synonym metadata'), ('term_metadata', 'term metadata'), ('global', 'global')], db_column='field', help_text='Field to which JSON schema applies', max_length=64, verbose_name='field')),
                ('name', models.CharField(db_column='name', help_text='Name of JSON schema', max_length=30, unique=True, validators=[database.models.schemas.not_reserved_names], verbose_name='name')),
                ('description', models.TextField(blank=True, db_column='description', help_text='Description of schema', verbose_name='description')),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField(db_column='schema', default=database.utils.empty_json, help_text='JSON object with schema', verbose_name='schema')),
            ],
            options={
                'verbose_name': 'Schema',
                'verbose_name_plural': 'Schemas',
            },
        ),
        migrations.CreateModel(
            name='SecondaryItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(db_column='path', help_text='Path to secondary resource', max_length=70, unique=True, verbose_name='path')),
                ('hash', models.CharField(db_column='hash', help_text='Hash of secondary resource file', max_length=64, unique=True, verbose_name='hash')),
                ('hash_function', models.CharField(choices=[('md5', 'md5'), ('sha244', 'sha244'), ('sha256', 'sha256'), ('sha384', 'sha384'), ('sha512', 'sha512')], db_column='hash_function', help_text='Hash function used to generate has of secondary file', max_length=10, verbose_name='hash function')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='Date of creation of secondary item', verbose_name='created on')),
                ('media_info', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='media_info', default=database.utils.empty_json, help_text='Media information of secondary item file', null=True, verbose_name='media info')),
                ('item', models.ForeignKey(db_column='item_id', help_text='Reference to primary item associated to secondary item', limit_choices_to={'is_uploaded': True}, on_delete=django.db.models.deletion.CASCADE, to='database.Item', verbose_name='item id')),
                ('item_type', models.ForeignKey(db_column='item_type', help_text='Type of file of secondary item', on_delete=django.db.models.deletion.PROTECT, to='database.ItemType', verbose_name='item type')),
            ],
            options={
                'verbose_name': 'Secondary Item',
                'verbose_name_plural': 'Secondary Items',
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, db_column='name', help_text='Name of site', max_length=70, verbose_name='name')),
                ('geo_ref', django.contrib.gis.db.models.fields.PointField(blank=True, db_column='geo_ref', help_text='Georeference of site as Geometry', srid=4326, verbose_name='geo ref')),
                ('latitude', models.FloatField(blank=True, db_column='latitude', help_text='Latitude of site', verbose_name='latitude')),
                ('longitude', models.FloatField(blank=True, db_column='longitude', help_text='Longitude of site', verbose_name='longitude')),
                ('altitude', models.FloatField(blank=True, db_column='altitude', help_text='Altitude of site (in meters)', null=True, verbose_name='altitude')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='metadata', default=database.utils.empty_json, help_text='Metadata associated to site', null=True, verbose_name='metadata')),
                ('creator', models.ForeignKey(blank=True, db_column='creator_id', help_text='Refrence to creator of site', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='creator id')),
            ],
            options={
                'verbose_name': 'Site',
                'verbose_name_plural': 'Sites',
            },
        ),
        migrations.CreateModel(
            name='SiteType',
            fields=[
                ('name', models.CharField(db_column='name', help_text='Name of site type', max_length=128, primary_key=True, serialize=False, verbose_name='name')),
                ('description', models.TextField(db_column='description', help_text='Description of site type', verbose_name='description')),
                ('metadata_schema', models.ForeignKey(db_column='metadata_type', default='libre', help_text='Schema for site metadata', limit_choices_to=models.Q(('field__exact', 'site_metadata'), ('field__exact', 'global'), _connector='OR'), on_delete=django.db.models.deletion.PROTECT, to='database.Schema', to_field='name', verbose_name='metadata type')),
            ],
            options={
                'verbose_name': 'Site Type',
                'verbose_name_plural': 'Site Types',
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('directory', models.CharField(db_column='directory', help_text='Directory containing all files in source', max_length=64, unique=True, verbose_name='directory')),
                ('source_file', models.CharField(db_column='source_file', help_text='File containing metadata for files in source directory', max_length=64, verbose_name='source file')),
                ('parse_function', models.CharField(db_column='parse_function', help_text='Parse function used to insert files and metadata to database', max_length=64, verbose_name='parse function')),
                ('uploaded_on', models.DateTimeField(auto_now_add=True, db_column='uploaded_on', help_text='Date on which files in source where parsed and uploaded to database', verbose_name='uploaded on')),
                ('uploader', models.ForeignKey(db_column='uploader_id', help_text='Reference to user who uploaded files in source', on_delete=django.db.models.deletion.PROTECT, related_name='source_uploader', to=settings.AUTH_USER_MODEL, verbose_name='uploader id')),
            ],
            options={
                'verbose_name': 'Source',
                'verbose_name_plural': 'Sources',
            },
        ),
        migrations.CreateModel(
            name='Synonym',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='metadata', default=database.utils.empty_json, help_text='Metadata associated to the synonym', null=True, verbose_name='metadata')),
            ],
            options={
                'verbose_name': 'Synonym',
                'verbose_name_plural': 'Synonyms',
            },
        ),
        migrations.CreateModel(
            name='SynonymSuggestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('synonym', models.CharField(db_column='synonym', help_text='Suggestion of synonym', max_length=128, verbose_name='synonym')),
                ('description', models.TextField(blank=True, db_column='description', help_text='Description of synonym', verbose_name='description')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='metadata', default=database.utils.empty_json, help_text='Metadata associated to synonym', null=True, verbose_name='metadata')),
                ('suggested_on', models.DateTimeField(auto_now_add=True, db_column='suggested_on', help_text='Date of synonym suggestion', verbose_name='suggested on')),
            ],
            options={
                'verbose_name': 'Synonym Suggestions',
                'ordering': ['-suggested_on'],
            },
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(db_column='value', help_text='Value of term', max_length=50, verbose_name='value')),
                ('description', models.TextField(blank=True, db_column='description', help_text='Description of term', verbose_name='description')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='metadata', help_text='Metadata associated to term', null=True, verbose_name='metadata')),
            ],
            options={
                'verbose_name': 'Term',
                'verbose_name_plural': 'Terms',
                'ordering': ['term_type', 'value'],
            },
        ),
        migrations.CreateModel(
            name='TermSuggestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, db_column='description', help_text='Description of term', verbose_name='description')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='metadata', default=database.utils.empty_json, help_text='Metadata associated to term', null=True, verbose_name='metadata')),
                ('suggested_on', models.DateTimeField(auto_now_add=True, db_column='suggested_on', help_text='Date of term suggestion', verbose_name='suggested on')),
                ('suggested_by', models.ForeignKey(db_column='suggested_by', help_text='User who made the term suggestion', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='suggested by')),
            ],
            options={
                'verbose_name': 'Term Suggestions',
                'ordering': ['-suggested_on'],
            },
        ),
        migrations.CreateModel(
            name='TermType',
            fields=[
                ('name', models.CharField(db_column='name', help_text='Name for term type', max_length=128, primary_key=True, serialize=False, verbose_name='name')),
                ('description', models.TextField(db_column='description', help_text='Description of term type', verbose_name='description')),
                ('icon', models.ImageField(blank=True, db_column='icon', help_text='Term type icon', null=True, upload_to='images/term_types/', verbose_name='icon')),
                ('is_categorical', models.BooleanField(db_column='is_categorical', help_text='Flag indicating whether the term type represents a categorical variable', verbose_name='is categorical')),
                ('metadata_schema', models.ForeignKey(db_column='metadata_type', default='libre', help_text='Metadata for terms of type', limit_choices_to=models.Q(('field__exact', 'term_metadata'), ('field__exact', 'global'), _connector='OR'), on_delete=django.db.models.deletion.PROTECT, related_name='term_metadata_type', to='database.Schema', to_field='name', verbose_name='metadata type')),
                ('synonym_metadata_schema', models.ForeignKey(db_column='synonym_metadata_type', default='libre', help_text='Metadata for synonym of terms of type', limit_choices_to=models.Q(('field__exact', 'synonym_metadata'), ('field__exact', 'global'), _connector='OR'), on_delete=django.db.models.deletion.PROTECT, related_name='term_synonym_metadata_type', to='database.Schema', to_field='name', verbose_name='synonym metadata type')),
            ],
            options={
                'verbose_name': 'Term Type',
                'verbose_name_plural': 'Term Types',
            },
        ),
        migrations.CreateModel(
            name='UserData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_developer', models.BooleanField(db_column='is_developer', default=False, help_text='Flag to indicate if user is a model developer', verbose_name='is developer')),
                ('is_curator', models.BooleanField(db_column='is_curator', default=False, help_text='Flag to indicate if user is a curator', verbose_name='is curator')),
                ('is_model', models.BooleanField(db_column='is_model', default=False, help_text='Flag to indicate if user is an AI model', verbose_name='is model')),
                ('institution', models.ForeignKey(db_column='institution_id', help_text='Institution to which user belongs', on_delete=django.db.models.deletion.PROTECT, to='database.Institution', verbose_name='institution id')),
                ('user', models.OneToOneField(db_column='user_id', editable=False, help_text='Reference to user', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user id')),
            ],
            options={
                'verbose_name': 'User Data',
                'verbose_name_plural': 'Users Data',
            },
        ),
        migrations.AddField(
            model_name='termsuggestion',
            name='value',
            field=models.ForeignKey(db_column='value', help_text='Value of term', on_delete=django.db.models.deletion.CASCADE, to='database.TermType', verbose_name='value'),
        ),
        migrations.AddField(
            model_name='term',
            name='term_type',
            field=models.ForeignKey(db_column='term_type', help_text='Type of term', limit_choices_to={'is_categorical': True}, on_delete=django.db.models.deletion.CASCADE, to='database.TermType', verbose_name='term type'),
        ),
        migrations.AddField(
            model_name='synonymsuggestion',
            name='source',
            field=models.ForeignKey(db_column='source_id', on_delete=django.db.models.deletion.CASCADE, to='database.Term', verbose_name=''),
        ),
        migrations.AddField(
            model_name='synonymsuggestion',
            name='suggested_by',
            field=models.ForeignKey(db_column='suggested_by', help_text='User who made the synonym suggestion', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='suggested by'),
        ),
        migrations.AddField(
            model_name='synonym',
            name='source',
            field=models.ForeignKey(db_column='source_id', help_text='Reference to the source of synonym', on_delete=django.db.models.deletion.CASCADE, related_name='synonym_source', to='database.Term', verbose_name='source id'),
        ),
        migrations.AddField(
            model_name='synonym',
            name='target',
            field=models.ForeignKey(db_column='target_id', help_text='Reference to the target of the synonym', on_delete=django.db.models.deletion.CASCADE, related_name='synonym_target', to='database.Term', verbose_name='target id'),
        ),
        migrations.AddField(
            model_name='site',
            name='site_type',
            field=models.ForeignKey(db_column='site_type', default='sitio genérico', help_text='Type of site', on_delete=django.db.models.deletion.PROTECT, to='database.SiteType', verbose_name='site type'),
        ),
        migrations.AlterUniqueTogether(
            name='schema',
            unique_together={('field', 'name')},
        ),
        migrations.AddField(
            model_name='samplingeventtype',
            name='metadata_schema',
            field=models.ForeignKey(db_column='metadata_schema', default='libre', help_text='Schema for metadata for sampling event of this type', limit_choices_to=models.Q(('field__exact', 'sampling_event_metadata'), ('field__exact', 'global'), _connector='OR'), on_delete=django.db.models.deletion.PROTECT, to='database.Schema', to_field='name', verbose_name='metadata schema'),
        ),
        migrations.AddField(
            model_name='samplingeventtype',
            name='site_types',
            field=models.ManyToManyField(db_column='site_types', help_text='Valid site types for this sampling event type', to='database.SiteType', verbose_name='site types'),
        ),
        migrations.AddField(
            model_name='samplingevent',
            name='sampling_event_type',
            field=models.ForeignKey(db_column='sampling_event_type', default='generic sampling event', help_text='Type of sampling event', on_delete=django.db.models.deletion.PROTECT, to='database.SamplingEventType', verbose_name='sampling event type'),
        ),
        migrations.AddField(
            model_name='samplingevent',
            name='site',
            field=models.ForeignKey(blank=True, db_column='site_id', help_text='Reference to site at which sampling took place', null=True, on_delete=django.db.models.deletion.PROTECT, to='database.Site', verbose_name='site id'),
        ),
        migrations.AddField(
            model_name='licencetype',
            name='metadata_schema',
            field=models.ForeignKey(db_column='metadata_schema', default='libre', help_text='Schema for licence metadata structure', limit_choices_to=models.Q(('field__exact', 'licence_metadata'), ('field__exact', 'global'), _connector='OR'), on_delete=django.db.models.deletion.PROTECT, to='database.Schema', to_field='name', verbose_name='metadata schema'),
        ),
        migrations.AddField(
            model_name='licence',
            name='licence_type',
            field=models.ForeignKey(db_column='licence_type', help_text='Type of licence used', on_delete=django.db.models.deletion.PROTECT, to='database.LicenceType', verbose_name='licence type'),
        ),
        migrations.AddField(
            model_name='itemtype',
            name='media_info_schema',
            field=models.ForeignKey(db_column='media_info_schema_id', help_text='Reference to JSON Schema to be used with media info of this item type', limit_choices_to={'field': 'item_media_info'}, on_delete=django.db.models.deletion.CASCADE, to='database.Schema', verbose_name='media info schema id'),
        ),
        migrations.AddField(
            model_name='item',
            name='item_type',
            field=models.ForeignKey(db_column='item_type', help_text='Type of resource', on_delete=django.db.models.deletion.PROTECT, to='database.ItemType', verbose_name='item type'),
        ),
        migrations.AddField(
            model_name='item',
            name='licence',
            field=models.ForeignKey(db_column='licence', help_text='Licence of item', on_delete=django.db.models.deletion.PROTECT, to='database.Licence', verbose_name='licence'),
        ),
        migrations.AddField(
            model_name='item',
            name='metadata_type',
            field=models.ForeignKey(db_column='metadata_type', default='libre', help_text='Schema for item metadata structure', limit_choices_to=models.Q(('field__exact', 'item_metadata'), ('field__exact', 'global'), _connector='OR'), on_delete=django.db.models.deletion.PROTECT, to='database.Schema', to_field='name', verbose_name='metadata type'),
        ),
        migrations.AddField(
            model_name='item',
            name='owner',
            field=models.ForeignKey(blank=True, db_column='owner_id', help_text='Owner of item', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='owner', to=settings.AUTH_USER_MODEL, verbose_name='owner id'),
        ),
        migrations.AddField(
            model_name='item',
            name='sampling',
            field=models.ForeignKey(blank=True, db_column='sampling_id', help_text='Sampling event associated with item', null=True, on_delete=django.db.models.deletion.PROTECT, to='database.SamplingEvent', verbose_name='sampling id'),
        ),
        migrations.AddField(
            model_name='item',
            name='source',
            field=models.ForeignKey(blank=True, db_column='event_id', help_text='Reference to source of item (parsing function and parent directory)', null=True, on_delete=django.db.models.deletion.PROTECT, to='database.Source', verbose_name='event id'),
        ),
        migrations.AlterUniqueTogether(
            name='institution',
            unique_together={('institution_name', 'subdependency')},
        ),
        migrations.AddField(
            model_name='eventtype',
            name='label_term_types',
            field=models.ManyToManyField(db_column='label_term_types', help_text='Valid term types with which to label this type of events', to='database.TermType', verbose_name='label term types'),
        ),
        migrations.AddField(
            model_name='entailment',
            name='metadata_type',
            field=models.ForeignKey(db_column='metadata_type', default='libre', help_text='JSON schema for entailment metadata', limit_choices_to=models.Q(('field__exact', 'entailment_metadata'), ('field__exact', 'global'), _connector='OR'), on_delete=django.db.models.deletion.PROTECT, to='database.Schema', to_field='name', verbose_name='metadata type'),
        ),
        migrations.AddField(
            model_name='entailment',
            name='source',
            field=models.ForeignKey(db_column='source_id', help_text='Source of entailment', on_delete=django.db.models.deletion.CASCADE, related_name='entailment_source', to='database.Term', verbose_name='source id'),
        ),
        migrations.AddField(
            model_name='entailment',
            name='target',
            field=models.ForeignKey(db_column='target_id', help_text='Target of entailment', on_delete=django.db.models.deletion.CASCADE, related_name='entailment_target', to='database.Term', verbose_name='target id'),
        ),
        migrations.AddField(
            model_name='device',
            name='brand',
            field=models.ForeignKey(db_column='brand', help_text='Brand of device', on_delete=django.db.models.deletion.PROTECT, related_name='device_brand', to='database.DeviceBrand', verbose_name='brand'),
        ),
        migrations.AddField(
            model_name='device',
            name='configuration_type',
            field=models.ForeignKey(db_column='configuration_type', default='libre', help_text='JSON schema for device configuration', limit_choices_to=models.Q(('field__exact', 'device_configuration'), ('field__exact', 'global'), _connector='OR'), on_delete=django.db.models.deletion.PROTECT, related_name='device_configuration_type', to='database.Schema', to_field='name', verbose_name='configuration type'),
        ),
        migrations.AddField(
            model_name='device',
            name='device_type',
            field=models.ForeignKey(db_column='device_type', help_text='Type of device', on_delete=django.db.models.deletion.PROTECT, related_name='device_type', to='database.DeviceType', verbose_name='device type'),
        ),
        migrations.AddField(
            model_name='device',
            name='metadata_type',
            field=models.ForeignKey(db_column='metadata_type', default='libre', help_text='JSON schema for device metadata', limit_choices_to=models.Q(('field__exact', 'device_metadata'), ('field__exact', 'global'), _connector='OR'), on_delete=django.db.models.deletion.PROTECT, related_name='device_metadata_type', to='database.Schema', to_field='name', verbose_name='metadata type'),
        ),
        migrations.AddField(
            model_name='collectionuser',
            name='metadata_type',
            field=models.ForeignKey(db_column='metadata_type', default='libre', help_text='JSON schema for collection user metadata', limit_choices_to=models.Q(('field__exact', 'collection_user_metadata'), ('field__exact', 'global'), _connector='OR'), on_delete=django.db.models.deletion.PROTECT, to='database.Schema', to_field='name', verbose_name='metadata type'),
        ),
        migrations.AddField(
            model_name='collectionuser',
            name='role',
            field=models.ForeignKey(db_column='role', help_text='Role of user in collection', on_delete=django.db.models.deletion.PROTECT, to='database.CollectionRole', verbose_name='role'),
        ),
        migrations.AddField(
            model_name='collectionuser',
            name='user',
            field=models.ForeignKey(db_column='user_id', help_text='User of collection', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user id'),
        ),
        migrations.AddField(
            model_name='collectiontype',
            name='device_types',
            field=models.ManyToManyField(through='database.CollectionDeviceType', to='database.DeviceType'),
        ),
        migrations.AddField(
            model_name='collectiontype',
            name='item_types',
            field=models.ManyToManyField(through='database.CollectionItemType', to='database.ItemType'),
        ),
        migrations.AddField(
            model_name='collectiontype',
            name='licence_types',
            field=models.ManyToManyField(to='database.LicenceType'),
        ),
        migrations.AddField(
            model_name='collectiontype',
            name='metadata_schema',
            field=models.ForeignKey(db_column='metadata_schema_id', default='libre', help_text='JSON Schema to be used with collection metadata for collections of this type', limit_choices_to=models.Q(('field__exact', 'collection_metadata'), ('field__exact', 'global'), _connector='OR'), on_delete=django.db.models.deletion.PROTECT, to='database.Schema', to_field='name', verbose_name='metadata schema id'),
        ),
        migrations.AddField(
            model_name='collectiontype',
            name='site_types',
            field=models.ManyToManyField(to='database.SiteType'),
        ),
        migrations.AddField(
            model_name='collectionsite',
            name='metadata_type',
            field=models.ForeignKey(db_column='metadata_type', default='libre', help_text='JSON schema for collection site metadata', limit_choices_to=models.Q(('field__exact', 'collection_site_metadata'), ('field__exact', 'global'), _connector='OR'), on_delete=django.db.models.deletion.PROTECT, to='database.Schema', to_field='name', verbose_name='metadata type'),
        ),
        migrations.AddField(
            model_name='collectionsite',
            name='site',
            field=models.ForeignKey(db_column='site_id', help_text='Reference to Site', on_delete=django.db.models.deletion.PROTECT, to='database.Site', verbose_name='site id'),
        ),
        migrations.AddField(
            model_name='collectionrole',
            name='metadata_schema',
            field=models.ForeignKey(db_column='metadata_type', default='libre', help_text='JSON schema for collection role metadata', limit_choices_to=models.Q(('field__exact', 'collection_user_metadata'), ('field__exact', 'global'), _connector='OR'), on_delete=django.db.models.deletion.PROTECT, to='database.Schema', to_field='name', verbose_name='metadata type'),
        ),
        migrations.AddField(
            model_name='collectionrole',
            name='role_type',
            field=models.ForeignKey(db_column='role_type', help_text='Role to be part of collection', on_delete=django.db.models.deletion.PROTECT, to='database.RoleType', verbose_name='role type'),
        ),
        migrations.AddField(
            model_name='collectionitemtype',
            name='collection',
            field=models.ForeignKey(db_column='collection_id', help_text='Collection in which role applies', on_delete=django.db.models.deletion.CASCADE, to='database.CollectionType', verbose_name='collection id'),
        ),
        migrations.AddField(
            model_name='collectionitemtype',
            name='item_type',
            field=models.ForeignKey(db_column='item_type', help_text='Item to be part of collection', on_delete=django.db.models.deletion.PROTECT, to='database.ItemType', verbose_name='item type'),
        ),
        migrations.AddField(
            model_name='collectionitemtype',
            name='metadata_schema',
            field=models.ForeignKey(db_column='metadata_type', default='libre', help_text='JSON schema for collection item metadata', limit_choices_to=models.Q(('field__exact', 'item_metadata'), ('field__exact', 'global'), _connector='OR'), on_delete=django.db.models.deletion.PROTECT, to='database.Schema', to_field='name', verbose_name='metadata type'),
        ),
        migrations.AddField(
            model_name='collectiondevicetype',
            name='collection',
            field=models.ForeignKey(db_column='collection_id', help_text='Collection in which role applies', on_delete=django.db.models.deletion.CASCADE, to='database.CollectionType', verbose_name='collection id'),
        ),
        migrations.AddField(
            model_name='collectiondevicetype',
            name='device_type',
            field=models.ForeignKey(db_column='device_type', help_text='Device to be part of collection', on_delete=django.db.models.deletion.PROTECT, to='database.DeviceType', verbose_name='device type'),
        ),
        migrations.AddField(
            model_name='collectiondevicetype',
            name='metadata_schema',
            field=models.ForeignKey(db_column='metadata_type', default='libre', help_text='JSON schema for collection device metadata', limit_choices_to=models.Q(('field__exact', 'collection_device_metadata'), ('field__exact', 'global'), _connector='OR'), on_delete=django.db.models.deletion.PROTECT, to='database.Schema', to_field='name', verbose_name='metadata type'),
        ),
        migrations.AddField(
            model_name='collectiondevice',
            name='device',
            field=models.ForeignKey(db_column='device_id', help_text='Reference to physical device', on_delete=django.db.models.deletion.PROTECT, to='database.PhysicalDevice', verbose_name='device id'),
        ),
        migrations.AddField(
            model_name='collectiondevice',
            name='metadata_type',
            field=models.ForeignKey(db_column='metadata_type', default='libre', help_text='JSON schema for metadata', limit_choices_to=models.Q(('field__exact', 'collection_device_metadata'), ('field__exact', 'global'), _connector='OR'), on_delete=django.db.models.deletion.PROTECT, related_name='collection_device_metadata_type', to='database.Schema', to_field='name', verbose_name='metadata_type'),
        ),
        migrations.AddField(
            model_name='collection',
            name='collection_type',
            field=models.ForeignKey(db_column='collection_type', default='generic collection', help_text='Type of collection', on_delete=django.db.models.deletion.PROTECT, to='database.CollectionType', verbose_name='collection type'),
        ),
        migrations.AddField(
            model_name='collection',
            name='device_types',
            field=models.ManyToManyField(to='database.DeviceType'),
        ),
        migrations.AddField(
            model_name='collection',
            name='devices',
            field=models.ManyToManyField(through='database.CollectionDevice', to='database.PhysicalDevice'),
        ),
        migrations.AddField(
            model_name='collection',
            name='institution',
            field=models.ForeignKey(blank=True, db_column='institution_id', help_text='Institution to which the collection belogs', null=True, on_delete=django.db.models.deletion.PROTECT, to='database.Institution', verbose_name='institution id'),
        ),
        migrations.AddField(
            model_name='collection',
            name='item_types',
            field=models.ManyToManyField(to='database.ItemType'),
        ),
        migrations.AddField(
            model_name='collection',
            name='licence_types',
            field=models.ManyToManyField(to='database.LicenceType'),
        ),
        migrations.AddField(
            model_name='collection',
            name='roles',
            field=models.ManyToManyField(through='database.CollectionRole', to='database.RoleType'),
        ),
        migrations.AddField(
            model_name='collection',
            name='site_types',
            field=models.ManyToManyField(to='database.SiteType'),
        ),
        migrations.AddField(
            model_name='collection',
            name='sites',
            field=models.ManyToManyField(through='database.CollectionSite', to='database.Site'),
        ),
        migrations.AddField(
            model_name='collection',
            name='users',
            field=models.ManyToManyField(related_name='collection_users', through='database.CollectionUser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='annotationtype',
            name='schema',
            field=models.ForeignKey(db_column='schema_id', help_text='JSON schema for annotation type', limit_choices_to=models.Q(('field__exact', 'annotation'), ('field__exact', 'global'), _connector='OR'), on_delete=django.db.models.deletion.PROTECT, to='database.Schema', verbose_name='schema id'),
        ),
        migrations.AddField(
            model_name='annotationtool',
            name='configuration_schema',
            field=models.ForeignKey(db_column='configuration_schema', default='libre', help_text='JSON schema for configuration of annotation tool', limit_choices_to=models.Q(('field__exact', 'annotation_metadata'), ('field__exact', 'global'), _connector='OR'), on_delete=django.db.models.deletion.PROTECT, to='database.Schema', to_field='name', verbose_name='configuration schema'),
        ),
        migrations.AddField(
            model_name='annotation',
            name='annotation_tool',
            field=models.ForeignKey(db_column='annotation_tool', help_text='Annotation tool used', on_delete=django.db.models.deletion.PROTECT, to='database.AnnotationTool', verbose_name='annotation tool'),
        ),
        migrations.AddField(
            model_name='annotation',
            name='annotation_type',
            field=models.ForeignKey(db_column='annotation_type', help_text='Type of annotation', on_delete=django.db.models.deletion.PROTECT, to='database.AnnotationType', verbose_name='annotation type'),
        ),
        migrations.AddField(
            model_name='annotation',
            name='created_by',
            field=models.ForeignKey(blank=True, db_column='created_by', help_text='Creator of annotation', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='annotation_created_by', to=settings.AUTH_USER_MODEL, verbose_name='created by'),
        ),
        migrations.AddField(
            model_name='annotation',
            name='event_type',
            field=models.ForeignKey(db_column='event_type', help_text='Type of event being annotated', on_delete=django.db.models.deletion.PROTECT, to='database.EventType', verbose_name='event type'),
        ),
        migrations.AddField(
            model_name='annotation',
            name='item',
            field=models.ForeignKey(db_column='item_id', help_text='Annotated item', limit_choices_to={'is_uploaded': True}, on_delete=django.db.models.deletion.PROTECT, to='database.Item', verbose_name='item id'),
        ),
        migrations.AddField(
            model_name='annotation',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, db_column='last_modified_by', editable=False, help_text='User that modified the annotation last', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='annotation_last_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='last modified by'),
        ),
        migrations.AddField(
            model_name='annotation',
            name='metadata_type',
            field=models.ForeignKey(blank=True, db_column='metadata_type', default='libre', help_text='JSON schema for metadata', limit_choices_to=models.Q(('field__exact', 'annotation_metadata'), ('field__exact', 'global'), _connector='OR'), null=True, on_delete=django.db.models.deletion.PROTECT, related_name='annotation_metadata_type', to='database.Schema', to_field='name', verbose_name='metadata type'),
        ),
        migrations.AlterUniqueTogether(
            name='term',
            unique_together={('term_type', 'value')},
        ),
        migrations.AlterUniqueTogether(
            name='device',
            unique_together={('brand', 'model')},
        ),
    ]

# Generated by Django 2.1.7 on 2019-02-14 23:25

from django.conf import settings
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('annotation_type', models.CharField(db_column='annotation_type', help_text='Type of annotation', max_length=30, verbose_name='annotation type')),
                ('event_type', models.CharField(db_column='event_type', help_text='Type of event being annotated', max_length=30, verbose_name='event type')),
                ('label', django.contrib.postgres.fields.jsonb.JSONField(db_column='label', help_text='Labels associated to annotation', verbose_name='label')),
                ('annotation', django.contrib.postgres.fields.jsonb.JSONField(db_column='annotation', help_text='Information of annotation location within item', verbose_name='annotation')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(db_column='metadata', help_text='Metadata associated to annotation', verbose_name='metadata')),
                ('certainty', models.FloatField(blank=True, db_column='certainty', help_text='Level of certainty of location or labelling of annotation', null=True, verbose_name='certainty')),
                ('quality', models.CharField(blank=True, choices=[('L', 'baja'), ('M', 'media'), ('H', 'alta')], db_column='quality', help_text='Quality of item content inside annotation', max_length=10, verbose_name='quality')),
                ('commentaries', models.TextField(blank=True, db_column='commentaries', help_text='Commentaries of annotator', verbose_name='commentaries')),
                ('created_on', models.DateTimeField(auto_now_add=True, db_column='created_on', help_text='Date of creation of annotation', verbose_name='created on')),
                ('modified_on', models.DateTimeField(auto_now=True, db_column='modified_on', help_text='Date of last modification', verbose_name='modified on')),
                ('created_by', models.ForeignKey(blank=True, db_column='created_by', help_text='Creator of annotation (User)', null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='created by')),
            ],
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='name', help_text='Name of collection', max_length=70, verbose_name='name')),
                ('description', models.TextField(db_column='description', help_text='Description of collection', verbose_name='description')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(db_column='metadata', help_text='Collection metadata', verbose_name='metadata')),
                ('coordinator', models.ForeignKey(blank=True, db_column='coordinator_id', help_text='Collection coordinator', null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='coordinator id')),
            ],
        ),
        migrations.CreateModel(
            name='CollectionOwner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection', models.ForeignKey(db_column='collection_id', help_text='Collection beign owned', on_delete=django.db.models.deletion.CASCADE, to='database.Collection', verbose_name='collection id')),
                ('user', models.ForeignKey(db_column='user_id', help_text='User owner of collection', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user id')),
            ],
        ),
        migrations.CreateModel(
            name='CollectionSchema',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Collection')),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(blank=True, db_column='serial_number', help_text='Serial number of device', max_length=100, null=True, unique=True, verbose_name='serial number')),
                ('type', models.CharField(db_column='type', help_text='Type of device', max_length=50, verbose_name='type')),
                ('brand', models.CharField(db_column='brand', help_text='Brand of device', max_length=50, verbose_name='brand')),
                ('model', models.CharField(db_column='model', help_text='Model of device', max_length=50, verbose_name='model')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='metadata', help_text='Metadata associated to device', null=True, verbose_name='metadata')),
                ('bundle', models.BooleanField(db_column='bundle', help_text='Does this device possibly represents many physical devices?', verbose_name='bundle')),
                ('owner', models.ForeignKey(blank=True, db_column='owner_id', help_text='Owner of device', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='owner')),
            ],
        ),
        migrations.CreateModel(
            name='Entailment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_column='metadata', help_text='Metadata associated to entailment', null=True, verbose_name='metadata')),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=70)),
                ('filesize', models.IntegerField()),
                ('hash', models.CharField(max_length=64)),
                ('hash_function', models.CharField(choices=[('md5', 'md5'), ('sha244', 'sha244'), ('sha256', 'sha256'), ('sha384', 'sha384'), ('sha512', 'sha512')], max_length=10)),
                ('type', models.CharField(max_length=40)),
                ('source_foreign_key', models.CharField(blank=True, max_length=50)),
                ('media_info', django.contrib.postgres.fields.jsonb.JSONField()),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('keywords', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=30), size=None)),
                ('captured_on', models.DateTimeField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('collection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='database.Collection')),
            ],
        ),
        migrations.CreateModel(
            name='Licence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=70)),
                ('description', models.TextField()),
                ('document', models.CharField(blank=True, max_length=70)),
                ('public', models.BooleanField()),
                ('created_on', models.DateTimeField()),
                ('valid_until', models.DateTimeField(blank=True, null=True)),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Model',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('path', models.CharField(max_length=50)),
                ('version', models.CharField(max_length=15)),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SamplingEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('configuration', django.contrib.postgres.fields.jsonb.JSONField()),
                ('commentaries', models.TextField(blank=True)),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('started_on', models.DateTimeField(blank=True, null=True)),
                ('ended_on', models.DateTimeField(blank=True, null=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='database.Device')),
            ],
        ),
        migrations.CreateModel(
            name='Schema',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.CharField(choices=[('annotation_label', 'annotation_label'), ('annotation_annotation', 'annotation_annotation'), ('annotation_metadata', 'annotation_metadata'), ('collection_metadata', 'collection_metadata'), ('device_metadata', 'device_metadata'), ('entailment_metadata', 'entailment_metadata'), ('item_media_info', 'item_media_info'), ('item_metadata', 'item_metadata'), ('licence_metadata', 'licence_metadata'), ('model_metadata', 'model_metadata'), ('sampling_event_configuration', 'sampling_event_configuration'), ('sampling_event_metadata', 'sampling_event_metadata'), ('secondary_item_media_info', 'secondary_item_media_info'), ('site_metadata', 'site_metadata'), ('synonym_metadata', 'synonym_metadata'), ('term_metadata', 'term_metadata'), ('user_metadata', 'user_metadata')], max_length=20)),
                ('name', models.CharField(max_length=30)),
                ('description', models.TextField(blank=True)),
                ('schema', django.contrib.postgres.fields.jsonb.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='SecondaryItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=70)),
                ('hash', models.CharField(max_length=64)),
                ('hash_function', models.CharField(choices=[('md5', 'md5'), ('sha244', 'sha244'), ('sha256', 'sha256'), ('sha384', 'sha384'), ('sha512', 'sha512')], max_length=10)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('type', models.CharField(max_length=40)),
                ('media_info', django.contrib.postgres.fields.jsonb.JSONField()),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Item')),
            ],
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=70)),
                ('geo_ref', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('altitude', models.FloatField(blank=True, null=True)),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('directory', models.CharField(max_length=64)),
                ('source_file', models.CharField(max_length=64)),
                ('parse_function', models.CharField(max_length=50)),
                ('uploaded_on', models.DateTimeField(auto_now_add=True)),
                ('uploader', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='source_uploader', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Synonym',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=50)),
                ('value', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True)),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.CharField(max_length=50)),
                ('role', models.CharField(choices=[('admin', 'admin'), ('developer', 'developer'), ('curator', 'curator'), ('user', 'user')], max_length=30)),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='synonym',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='synonym_source', to='database.Term'),
        ),
        migrations.AddField(
            model_name='synonym',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='synonym_target', to='database.Term'),
        ),
        migrations.AddField(
            model_name='samplingevent',
            name='site',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='database.Site'),
        ),
        migrations.AddField(
            model_name='item',
            name='licence',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='database.Licence'),
        ),
        migrations.AddField(
            model_name='item',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='owner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='item',
            name='sampling',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='database.SamplingEvent'),
        ),
        migrations.AddField(
            model_name='item',
            name='source',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='database.Source'),
        ),
        migrations.AddField(
            model_name='entailment',
            name='source',
            field=models.ForeignKey(db_column='source_id', help_text='Source of entailment', on_delete=django.db.models.deletion.CASCADE, related_name='entailment_source', to='database.Term', verbose_name='source id'),
        ),
        migrations.AddField(
            model_name='entailment',
            name='target',
            field=models.ForeignKey(db_column='target_id', help_text='Target of entailment', on_delete=django.db.models.deletion.CASCADE, related_name='entailment_target', to='database.Term', verbose_name='target id'),
        ),
        migrations.AddField(
            model_name='collectionschema',
            name='schema',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='database.Schema'),
        ),
        migrations.AddField(
            model_name='annotation',
            name='item',
            field=models.ForeignKey(db_column='item_id', help_text='Annotated item', on_delete=django.db.models.deletion.PROTECT, to='database.Item', verbose_name='item id'),
        ),
        migrations.AddField(
            model_name='annotation',
            name='model',
            field=models.ForeignKey(db_column='model_id', help_text='Creator of annotation (AI model)', on_delete=django.db.models.deletion.PROTECT, to='database.Model', verbose_name='model id'),
        ),
    ]
